---
title: "Add environmental data to stomach data"
author: "Max Lindmark & Viktor Thunell"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    embed-resources: true
    fig-width: 8
    #fig-asp: 0.618
knitr: 
  opts_chunk:
    fig.align: center
editor: source
execute: 
  echo: true
  eval: true
  cache: false
---

This script add enviromental information (depth and bottom oxygen, temperature and salinity) prepared in 02-combine_oxysaltemp_simulations_v2 to the stomach content data prepared in 01-prepare-stomach-data_v2.

  * Depth is extracted from a file dowladed from EMODnet Bathymetry project (https:// emodnet.ec.europa.eu/en/bathymetry) 
  * Source of bottom oxygen, temperature and salinity listed in 02-combine_oxysaltemp_simulations_v2.


## Load libraries

```{r lib}
#| message: false

pkgs <- c("tidyverse", "tidylog", "sp", "raster", "devtools", "RCurl", "sdmTMB", "purrr", "terra", "ncdf4", "chron", "ncdf4", "tidyterra", "tidymodels") 

if(length(setdiff(pkgs, rownames(installed.packages()))) > 0){

    install.packages(setdiff(pkgs, rownames(installed.packages())), dependencies = T)
 
}

invisible(lapply(pkgs, library, character.only = T))

# Source code for map plots
devtools::source_url("https://raw.githubusercontent.com/VThunell/cod-rpw/main/R/functions/map-plot.R")

# Set path
home <- here::here()

# conflicting packages

tidymodels_prefer(quiet = TRUE)
conflicts_prefer(dplyr::left_join, dplyr::mutate, dplyr::filter, dplyr::select, dplyr::summarise)
```

## Read data

```{r}
#| message: false
#| warning: false

dat <- read_csv(paste0(home, "/data/stomach/stomachs_v2.csv"))

glimpse(dat)
```

# Add depth

```{r add depth}
# load depth raster downloaded from https://emodnet.ec.europa.eu/geoviewer/
dep_raster <- terra::rast(paste0(home, "/data/environment/Mean depth natural colour (with land).nc"))
class(dep_raster)
crs(dep_raster, proj = TRUE)

plot(dep_raster)

# extract depth from raster
dat$depth <- terra::extract(dep_raster, dat |> dplyr::select(lon, lat))$elevation

ggplot(dat, aes(lon, lat, color = depth*-1)) + 
  geom_point()

# make depth from elevation
dat$depth <- dat$depth*-1

hist(dat$depth)

plot_map_fc +
  geom_point(data = dat, aes(X*1000, Y*1000, color = depth), alpha = 0.5) +
  #theme_sleek(base_size = 6) + 
  geom_sf()

```

## Add oxy, temp, and sal from SMHI hindcast (and models of Copernicus and hindcast)

```{r add oxysaltemp}
# read Hindcast data
envcov_df <- readRDS(file = paste0(home, "/data/environment/bias_corr_vars_oxy.rds")) |>
  dplyr::left_join(readRDS(file = paste0(home, "/data/environment/bias_corr_vars_sal.rds"))) |>
  dplyr::left_join(readRDS(file = paste0(home, "/data/environment/bias_corr_vars_temp.rds"))) |>
  filter(year > 1962) 

envcov_df <- envcov_df |>
  mutate(yearmonth = (year-1963)*12+month)

# function for extraction based on yearmonth
ext_envdat <- function(ayearmonth)  {

  ext_y = dat |> filter(yearmonth == ayearmonth)  |> dplyr::select(lon, lat) # coords from the stomach data, can only be lon and lat for extract()
  
  envcov_df |>
    filter(yearmonth == ayearmonth) |>
    as_spatraster(xycols = c(1,2), crs = "WGS84", digits = 2) |>
    terra::extract(ext_y, method = "bilinear", ID=FALSE) |> # to reduce NaNs produced when points are outside raster extent (i.e. on land) 
    dplyr::select(oxy, sal, temp) |>
    bind_cols(dat |> filter(yearmonth == ayearmonth))
    
}

dat <- dat |>
  mutate(yearmonth = (year-1963)*12+month)

# use the ext_envdat function to extract env covs values to the observations fr hindcast
dat_env <- unique(dat |> pull(yearmonth)) |> 
  map(\(x) ext_envdat(x)) |>
  list_rbind()

# Many observations lie just outside the hincast_allyears raster extent causing NA values
theNAs <- dat_env |> filter(is.na(oxy) | is.na(sal) | is.na(temp))
theNAs |> summarise(n = n(), .by= year) |> arrange(year)
theNAs |> summarise(sla = summary(lat), slo = summary(lon))# |> arrange(year)

plot_map_fc +
  geom_point(data = theNAs, aes(X*1000, Y*1000, color = depth), alpha = 0.5) +
  #theme_sleek(base_size = 6) + 
  geom_sf()

# filter out those observations from the data using pred_ID
dat_na <- dat |> 
  filter(pred_ID %in% theNAs$pred_ID)

# a function to find the closest point with env covs in the env_dat
cov_na_fill <- function(napred_id)  {

  pid_lly = dat_na |> 
    filter(pred_ID == napred_id) |> dplyr::select(lon, lat, yearmonth) 

  pl = distance(pid_lly |> dplyr::select(lon, lat),
           envcov_df |> filter(yearmonth == pid_lly$yearmonth) |> dplyr::select(lon,lat),
           lonlat = TRUE)
  
  dat_na |> 
    filter(pred_ID == napred_id) |> 
    bind_cols(envcov_df[which.min(pl),] |> dplyr::select(oxy,temp,sal) )

}

# apply function to dat_na
dat_na_filled <- dat_na$pred_ID |>
map(\(x) cov_na_fill(x)) |>
  list_rbind() 

# no NAs left
dat_na_filled  |> filter(is.na(oxy) | is.na(sal) | is.na(temp))

# bind the non-NA observations with the NAs 
dat_env_all <- dat_env |> 
  filter(!is.na(oxy) | !is.na(sal) | !is.na(temp)) |>
  bind_rows(dat_na_filled)

# all are there?(!)
dat_env_all |> summarise(n()) == dat |> summarise(n())
sum(is.na(dat_env_all$oxy))
```

# Plot & save

```{r p and s}
# check plots
plot_map_fc +
  geom_point(data = dat_env_all, aes(X*1000, Y*1000, color = oxy), alpha = 0.5) +
  #theme_sleek(base_size = 6) + 
  geom_sf() 
  
plot_map_fc +
  geom_point(data = dat_env_all, aes(X*1000, Y*1000, color = temp), alpha = 0.5) +
  #theme_sleek(base_size = 6) + 
  geom_sf() 

plot_map_fc +
  geom_point(data = dat_env_all, aes(X*1000, Y*1000, color = sal), alpha = 0.5) +
  #theme_sleek(base_size = 6) + 
  geom_sf() 

dat_env <- dat_env_all |> dplyr::select(-yearmonth)
```

## Add cod densities, only for post 1992!

```{r cod density covariate}

# for the Mod, the fr data is instead used to scale the prediction grid
# data_stats <- read_csv(paste0(home, "/data/survey/data_stats.csv")) 
# m3 <- readRDS(paste0(home, file = "/R/main-analysis/m3.rds"))
# hist(m3$data$density)
# # d_stats is used to scale the prediction grid when predicting cod densities
# data_stats_st <- data_stats |>
#   summarise(depth_mean = mean(depth, na.omit = TRUE),
#             depth_sd = sd(depth),
#             sal_mean = mean(sal, na.omit = TRUE),
#             sal_sd = sd(sal),
#             oxy_mean = mean(oxy, na.omit = TRUE),
#             oxy_sd = sd(oxy),
#             temp_mean = mean(temp, na.omit = TRUE),
#             temp_sd = sd(temp))
# 
# 
# df_m3 <- dat_env |>
#   filter(between(year, 1993, 2021)) |>
#   drop_na(oxy,
#           sal,
#           temp) |>
#   mutate(depth = ifelse(depth < 0, 0, depth),
#          depth_sc = (depth - data_stats_st$depth_mean)/data_stats_st$depth_sd,
#          oxy_sc = (oxy - data_stats_st$oxy_mean)/data_stats_st$oxy_sd,
#          sal_sc = (sal - data_stats_st$sal_mean)/data_stats_st$sal_sd,
#          temp_sc = (temp - data_stats_st$temp_mean)/data_stats_st$temp_sd,
#          depth_sq = depth_sc^2,
#          temp_sq = temp_sc^2,
#          year_f = as.factor(year),
#          quarter_f = as.factor(1))
# 
# # Predict cod cpue density with model model from Max  
# cpue_cod <- predict(m3, newdata = df_m3) |>
#   mutate(log_density_cod = est) |> # on the log scale Max and Sean says!
#   dplyr::select(lat, lon, log_density_cod) |>
#   distinct()
# 
# dat_env2 <- dat_env |>
#   left_join(cpue_cod) # multiple = "any"?? 
# 
# hist(exp(dat_env2$log_density_cod))
```

# Save
```{r save}
# Save data
saveRDS(dat_env, paste0(home, "/data/stomach/stom_env_v2.rds")) # without cod densities
#saveRDS(dat_env2, paste0(home, "/data/stomach/stom_env.rds")) # with cod densities
```
